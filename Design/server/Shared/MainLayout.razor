@inherits SimmeMqqt.Layouts.MainLayoutComponent
@inject NavigationManager NavigationManager

@using Radzen
@using Radzen.Blazor
@using Microsoft.AspNetCore.SignalR.Client
<RadzenDialog />
<RadzenNotification />
<RadzenTooltip />
<RadzenContextMenu />

<RadzenLayout>
  <ChildContent>
    <RadzenHeader>
      <ChildContent>
        <div class="row justify-content-start align-items-center">
          <div class="col-6 d-flex align-items-center">
            <RadzenSidebarToggle Click="@SidebarToggle0Click">
            </RadzenSidebarToggle>
            <RadzenLabel Text="JairoAndSimmeMQTT">
            </RadzenLabel>
          </div>
          <div class="col-6 text-right">
          </div>
        </div>
      </ChildContent>
    </RadzenHeader>
    <RadzenBody @ref="body0">
      <ChildContent>
        <RadzenContentContainer Name="main">
        @Body
        </RadzenContentContainer>
      </ChildContent>
    </RadzenBody>
    <RadzenSidebar @ref="sidebar0">
      <ChildContent>
        <RadzenPanelMenu style="height: 100%">
          <ChildContent>
            <RadzenPanelMenuItem Text="Main" Path="main">
            </RadzenPanelMenuItem>
            <RadzenPanelMenuItem Text="Uurlijk" Path="uurlijk">
            </RadzenPanelMenuItem>
            <RadzenPanelMenuItem Text="Dagelijks" Path="dagelijks">
            </RadzenPanelMenuItem>
            <RadzenPanelMenuItem Text="Maandelijks" Path="maandelijks">
            </RadzenPanelMenuItem>
            <RadzenPanelMenuItem Text="Forever" Path="forever">
            </RadzenPanelMenuItem>
            <RadzenPanelMenuItem Text="Realtime" Path="realtime">
            </RadzenPanelMenuItem>
            <RadzenPanelMenuItem Text="Dag kiezen" Path="dag-kiezen">
            </RadzenPanelMenuItem>
          </ChildContent>
        </RadzenPanelMenu>
      </ChildContent>
    </RadzenSidebar>
    <RadzenFooter>
      <ChildContent>
        <RadzenLabel Text="CIVON, Copyright Ⓒ 2022">
        </RadzenLabel>
      </ChildContent>
    </RadzenFooter>
  </ChildContent>
</RadzenLayout>
@code{
    private HubConnection hubConnection;

    protected async override Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/dashboardHub"))
            .WithAutomaticReconnect()
            .Build();

        hubConnection.On<float,float,float,float,int,int,int,int>("UurlijkData", (Beschikbaarheid, Prestaties,Kwaliteit,OEE,Pauze,Failure,PauzeCurrent,FailureCurrent) =>
                                                        {
                                                            Notification(FailureCurrent);
                                                        });
        await hubConnection.StartAsync();        
    }

    private void Notification(int FailureCurrent)
    {
        if(FailureCurrent >= 5)
        {
            ShowNotification(new NotificationMessage { Style = "position: absolute; left: -1000px;", Severity = NotificationSeverity.Error, Summary = "Storing langer dan 5 min", Detail = "Success Detail", Duration = 40000 });
        }
        
    }

    
    void ShowNotification(NotificationMessage message)
    {
        NotificationService.Notify(message);
    }
}
